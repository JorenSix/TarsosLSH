h1. TarsosLSH - Locality Sensitive Hashing (LSH) in Java

TarsosLSH is a Java library implementing sub-linear nearest neigbour search algorithms. It contains both an approximate and an exact search algorithm. The first, Locality-sensitive Hashing (<abbr title="Locality-sensitive Hashing">LSH</abbr>) is a randomized approximate search algorithm for a number of search spaces. The second, Multi-index hashing is an exact nearest neigbour search algorithm which is limited to Hamming space.

Locality-sensitive Hashing (LSH), a practical nearest neighbour search algorithm for multidimensional vectors that operates in sublinear time. It supports several Locality Sensitive Hashing (LSH) families: the Euclidean hash family (L<sub>2</sub>), city block hash family (L<sub>1</sub>) and cosine hash family. The library tries to hit the sweet spot between being capable enough to get real tasks done, and compact enough to serve as a demonstration on how <abbr title="Locality-sensitive Hashing">LSH</abbr> works.

Multi-index hashing is an exact, sub-linear nearest neighbour search algorithm in hamming space. It is a simple algorithm that seeks a balance between storage space requirements and query performance.

h2. Quickly Getting Started with TarsosLSH

Head over to the "TarsosLSH release repository":http://tarsos.0110.be/releases/TarsosLSH/ and download the latest "TarsosLSH library":http://tarsos.0110.be/releases/TarsosLSH/TarsosLSH-latest/TarsosLSH-latest.jar. Consult the "TarsosLSH API documentation":http://tarsos.0110.be/releases/TarsosLSH/TarsosLSH-latest/TarsosLSH-latest-Documentation/. If you, for some reason, want to build from source, you need "Apache Ant":http://ant.apache.org/ and "git":http://git-scm.com/ installed on your system. The following commands fetch the source and build the library and example jars: 
<pre><code>git clone https://JorenSix@github.com/JorenSix/TarsosLSH.git
cd TarsosLSH/build
ant  #Builds the core TarsosLSH library
ant javadoc #build the API documentation
</code></pre>
When everything runs correctly you should be able to run the command line application, and have the latest version of the TarsosLSH library for inclusion in your projects. Also, the Javadoc documentation for the API should be available in TarsosLSH/doc. Drop me a line (<a href='ma&#105;&#108;to&#58;j&#111;re&#110;&#64;01%310&#46;&#98;&#101;'>joren _ at _ 0110 _ dot _ be</a>) if you use TarsosLSH in your project. Always nice to hear how this software is used.

The fastest way to get something on your screen is executing this on your command line: @java - jar TarsosLSH.jar@ this lets LSH run on a random data set. The full reference of the command line application is included below:

<pre>
Name
	TarsosLSH: finds the nearest neighbours in a data set quickly, using LSH.
Synopsis     
	java - jar TarsosLSH.jar [options]
Description
	Tries to find nearest neighbours for each vector in the
	query file, using Euclidean (L<sub>2</sub>) distance by default.
	
	Both dataset.txt and queries.txt have a similar format:
	an optional identifier for the vector and a list of N
	coordinates (which should be doubles).
	
	[Identifier] coord1 coord2 ... coordN
	[Identifier] coord1 coord2 ... coordN
	
	For an example data set with two elements and 4 dimensions:
		
	Hans 12 24 18.5 -45.6
	Jane 13 19 -12.0 49.8
	
	Options are:
		
	-d dataset.txt	
		The dataset with vectors to store in the hash table
	-q queries.txt	
		A list of vectors to query against the stored dataset
	-f cos|l1|l2
		Defines the hash family to use:
			l1	City block hash family (L<sub>1</sub>)
			l2	Euclidean hash family(L<sub>2</sub>)
			cos	Cosine distance hash family
	-r radius
		Defines the radius in which near neighbours should
		be found. Should be a double. By default a reasonable
		radius is determined automatically.
	-h n_hashes
		An integer that determines the number of hashes to
		use. By default 4, 32 for the cosine hash family.
	-t n_tables
		An integer that determines the number of hash tables,
		each with n_hashes, to use. By default 4.
	-n n_neighbours
		Number of neighbours in the neighbourhood, defaults to 3.
	-b
		Benchmark the settings.
	--help
		Prints this helpful message.
	
Examples
	Search for nearest neighbours using the l2 hash family with a radius of 500
	and utilizing 5 hash tables, each with 3 hashes.
	
	java -jar TarsosLSH.jar -f l2 -r 500 -h 3 -t 5 -d dataset.txt -q queries.txt
</pre>
 
h2. Source Code Organization 

The source tree is divided in three directories: 
* @src@ contains the source files, the core functionality. 
** @src/be/tarsos/lsh@ Contains the LSH implementation
** @src/be/tarsos/mih@ Contains an implementation of a multi index hash algorithm
* @test@ contains unit tests for some of the functionality.
* @build@ contains ANT build files. Either to build Java documentation and runnable JAR-files.

h2. License

The TarsosLSH license is distributed under the LGPL license.

h2. Further Reading

This section includes a links to resources used to implement this library.

* The "LSH-page":http://www.mit.edu/~andoni/LSH/ maintained by Alexandr Andoni contains pointers to good resources:
** "Locality-Sensitive Hashing Scheme Based on p-Stable Distributions":http://theory.lcs.mit.edu/~indyk/nips-nn.ps a chapter by Alexandr Andoni, Mayur Datar, Nicole Immorlica, Piotr Indyk, and Vahab Mirrokni which appeared in the book Nearest Neighbor Methods in Learning and Vision: Theory and Practice, by T. Darrell and P. Indyk and G. Shakhnarovich (eds.), MIT Press, 2006. 
** "Similarity Search in High Dimensions via Hashing":http://theory.csail.mit.edu/~indyk/vldb99.ps The original LSH Paper for hamming distance by Gionis, Aristides and Indyk, Piotr and Motwani, Rajeev.
* "Locality-Sensitive Hashing for Finding Nearest Neighbors":http://www.slaney.org/malcolm/yahoo/Slaney2008-LSHTutorial.pdf a good introduction of <abbr title="Locality-sensitive Hashing">LSH</abbr> by Malcom Slaney & Michael Casey
* "Finding Similar Items":http://i.stanford.edu/~ullman/mmds/ch3.pdf, Chapter Three of "Mining of Massive Datasets" by Anand Rajaraman and Jeff Ullman is a textbook introducing the LSH concept.
* "Szudzik pairing functions":http://szudzik.com/ElegantPairing.pdf by Matthew Szudzik. Explains how integer hashes can be combined deterministically to form a reversible, unique new hash.

For more information on Multi-Index Hashing:
* "Fast Search in Hamming Space with Multi-Index Hashing":http://www.cs.toronto.edu/~norouzi/research/papers/multi_index_hashing.pdf, Mohammad Norouzi, Ali Punjani, David Fleet - IEEE Computer Vision and Pattern Recognition (CVPR), 2012. 
* An extended version of "Fast Exact Search in Hamming Space with Multi-Index Hashing":http://arxiv.org/abs/1307.2982 
* "Compact Discrete Representations for Scalable Similarity Search":https://tspace.library.utoronto.ca/bitstream/1807/73095/3/Norouzi_Mohammad_201606_PhD_thesis.pdf
* A github repository with a "Multi-Index Hashing C++ implementation":https://github.com/norouzi/mih

h2. Dependencies

TarsosLSH relies on "MapDB":http://www.mapdb.org/ for storage which in turn depends on "eclipse collections":https://www.eclipse.org/collections/.


h2. Change log

<dt>Version 0.5</dt><dd>2013-04-17</dd> First release which includes several LSH families.

<dt>Version 0.6</dt><dd>2013-06-13</dd> Added serialization options to store LSH hashes, which makes the library more practical in real-world scenario's. Later database support should be added.

<dt>Version 0.7</dt><dd>2015-03-16</dd> Maintenance release with changed package names and small fixes to the documentation and build file.

<dt>Version 0.8</dt><dd>2017-03-17</dd> Adds an implementation of a Hamming space LSH scheme.

<dt>Version 0.9</dt><dd>2017-04-21</dd> Adds an implementation of a Hamming space multi index hasher algorithm as described in "Fast Exact Search in Hamming Space with Multi-Index Hashing":http://arxiv.org/abs/1307.2982 .




